/*========================================================================
  VES --- VTK OpenGL ES Rendering Toolkit

      http://www.kitware.com/ves

  Copyright 2011 Kitware, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 ========================================================================*/
/// \class vesKiwiCameraSpinner
/// \ingroup KiwiPlatform
/// \brief A class for managing camera rotation inertia.
//
/// This class is used to implement camera rotation inertia.  2D pan gestures
/// are normally translated into camera rotation about the focal point.  When
/// the pan gesture ends, it is often desirable to have some residual rotation
/// of the camera continue with decay to simulate inertia.  To use this class,
/// call handlePanGesture() for each pan gesture event generated by the app.
/// When the pan gesture ends, call enable() and then call updateSpin() after
/// each rendered frame.  Eventually, the spin will decay passed a threshold
/// and the camera spinner will be disabled and you can stop rendering.
#ifndef __vesKiwiCameraSpinner_h
#define __vesKiwiCameraSpinner_h

#include "vesMath.h"
#include "vesSharedPtr.h"
#include "vesSetGet.h"

class vesKiwiCameraInteractor;

class vesKiwiCameraSpinner
{
public:

  vesTypeMacro(vesKiwiCameraSpinner);

  vesKiwiCameraSpinner();
  ~vesKiwiCameraSpinner();

  /// Set/Get the vesKiwiCameraInteractor instance to operate on.
  void setInteractor(vesSharedPtr<vesKiwiCameraInteractor> app);
  vesSharedPtr<vesKiwiCameraInteractor> interactor() const;

  /// Notify this object when a pan gesture occurs.  This information
  /// is used to determine the velocity of the camera spin.
  void handlePanGesture(const vesVector2d& pan);

  /// Enable the camera spinner.
  /// This should be called when the pan gesture ends.
  void enable();

  /// Disable the camera spinner.  This will be called to stop the camera
  /// spin prematurely.  It will be called automatically when the camera
  /// spin slows past a threshold.
  void disable();

  /// Return whether or not the camera spinner is currently enabled.
  bool isEnabled() const;

  double currentMagnitude() const;

  /// Set/Get the deceleration magnitude, defined in pixels per second^2.
  /// The default is 100.  A value of 0.0 will cause the spinner to spin forever.
  double deceleration() const;
  void setDeceleration(double d);

  /// Update the camera spin.  This method will call the camera manipulation
  /// methods on the vesKiwiBaseApp instance.  After the update, the spin
  /// velocity decreases.  When it slows past a threshold this method will
  /// automatically call disable().
  void updateSpin();

private:

  vesKiwiCameraSpinner(const vesKiwiCameraSpinner&); // Not implemented
  void operator=(const vesKiwiCameraSpinner&); // Not implemented

  vesSharedPtr<vesKiwiCameraInteractor> mInteractor;

  bool  mIsEnabled;
  double mLastPanDistance;
  double mLastTime;
  double mDeceleration;
  vesVector2d mLastPanDirection;
};


#endif
